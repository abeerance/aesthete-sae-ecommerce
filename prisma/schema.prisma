// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  username             String    @unique
  avatarUrl            String?
  password             String
  passwordResetToken   String?
  passwordResetExpires DateTime?
  passwordChangedAt    DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // relations
  CartItem CartItem[]
  Order    Order[]

  @@map("users")
}

model Product {
  id                  String   @id @default(uuid())
  name                String
  description         Json
  sustainability      Json
  shippgingAndReturns Json
  price               Float
  imageUrl            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // relations
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  carts      CartItem[]
  orders     OrderItem[]

  @@map("product")
}

model Category {
  id   String @id @default(uuid())
  name String

  // relations
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  parentId      String?
  subcategories Category[] @relation("CategoryToSubcategory")
  products      Product[]

  @@map("category")
}

model CartItem {
  id       String @id @default(uuid())
  quantity Int

  // relations
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@map("cart_item")
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // relations
  user   User        @relation(fields: [userId], references: [id])
  userId String
  items  OrderItem[]

  @@map("order")
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int

  // relations
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String

  @@map("order_item")
}
